<?php
namespace App\Controllers;

use App\App;
use App\Entity\UserEntity;
use App\Models\UserModel;
use App_Core_Exception;
use Core\Controllers\Controller;
use Core\Utils\Ajax;
use Core\Form\FormValidation;

/**
 * Class LoginController
 * @package App\Controller
 */
class LoginController extends Controller
{

    const LOGIN_REQUEST_TYPE = "login";

    /**
     * @var FormValidation
     */
    protected $formValidation;

    /**
     * @var UserModel
     */
    protected $userModel;

    /**
     * @param $path
     * @param $params
     */
    public function __construct($path, $params = null)
    {
        $this->formValidation = new FormValidation();
        $this->userModel = App::getModel('user');
        parent::__construct($path, $params);
        $this->trad->setTranlateFile('login');
    }

    /**
     * Before render
     *
     * @throws App_Core_Exception
     */
    public function beforeRender()
    {
        $this->checkPostRequest();
        $this->setStylesheetPath('login.css');
        $this->setScript('login.js', Controller::FUNCTION_PATH, Controller::MODULE_TYPE);
        $this->meta->setTitle("Connexion");

        $this->formValidation
            ->generateToken()
            ->saveTokenInSession('login')
            ->saveTokenInApp('login');
        parent::beforeRender(); // TODO: Change the autogenerated stub
    }

    /**
     * @return void
     */
    protected function afterRender()
    {
        $this->setBlock(self::SCRIPTS_BLOCK);
    }

    /**
     * Check post request
     * @throws App_Core_Exception
     */
    public function checkPostRequest()
    {
        if (!$this->request->isPost()) return;
        $ajaxObject = new Ajax($this->request->getPost());
        switch ($ajaxObject->getRequestType()) {
            case self::LOGIN_REQUEST_TYPE:
                $datas = $ajaxObject->getRequestDatas();

                // Validate form
                $this->validateForm($datas);
                if ($error = $this->formValidation->getError()) {
                    $ajaxObject->error($error);
                    $ajaxObject->sendResponse();
                }

                /** @var UserEntity $loginUser */
                $loginUser = $this->userModel->getEntity($this->userModel->_entityName, [
                    'email'         => $datas['email'],
                    'password'      => sha1($datas['password']),
                    'username'      => $datas['email']
                ]);

                // Search user with username & email
                /** @var UserEntity $user */
                $user =
                    $this->userModel->load($loginUser->getEmail(), 'email') ||
                    $this->userModel->load($loginUser->getUsername(), 'username');

                if ($user) {
                    if ($user->getPassword() === $loginUser->getPassword()) {
                        $this->userModel->login($user);
                        $ajaxObject->success("ConnectÃ© !");
                    } else {
                        $ajaxObject->error("Mot de passe incorect");
                    }
                } else {
                    $ajaxObject->error("Nom d'utilisateur ou Email incorect");
                }
        }
        $ajaxObject->sendResponse();
    }

    /**
     * Validate form
     *
     * @param $datas
     */
    public function validateForm($datas)
    {
        $this->formValidation
            ->verifyFormToken('login', $datas['formToken'])
            ->validateEmail($datas['email']);
    }

}